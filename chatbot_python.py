# -*- coding: utf-8 -*-
"""CHATBOT PYTHON

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IinZlBhqKt4TDM3bmWY93HfgCEWnDd7N

# **Importing the required libraries**
"""

import numpy as np #used for numerical computations 
import nltk #natural language processing
import string #process and handle strings 
import random

"""# **Importing and reading the corpus**"""

f=open('chatbot.txt','r',errors='ignore')
raw_doc=f.read()
raw_doc=raw_doc.lower() #Converts text to lowercase
#punct pre-trained tokenizer build a model around what's required and to give you an answer
nltk.download('punkt') #using the punkt tokenizer
nltk.download('wordnet') #using the wordnet dictionary
sent_tokens = nltk.sent_tokenize(raw_doc) #Converts doc to list of sentences
word_tokens = nltk.word_tokenize(raw_doc) #converts doc to list of words

"""# **Example of sentence tokens**"""

sent_tokens[:2]

"""# **Example of word tokens**"""

word_tokens[:2]

"""# **Text preprocessing**"""

lemmer = nltk.stem.WordNetLemmatizer()
#WordNet is a semanticaly-oriented dictionary of english included in NLTK.
def LemTokens(tokens):
  return [lemmer.lemmatize(token)for token in tokens]
remove_punct_dict = dict((ord(punct),None) for punct in string.punctuation)
def LemNormalize(text):
  return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))

"""# **Defining the greeting function**"""

GREET_INPUTS = ("hello","hi","greetings","sup","What's up","hey")
GREET_RESPONSES = ["hi","hey","*nods*","hi there","hello","I am glad!" "You are talking to me"]
def greet(sentence):

  for word in sentence.split():
    if word.lower() in GREET_INPUTS:
      return random.choice(GREET_RESPONSES)

"""# **Response Generation**"""

from sklearn.feature_extraction.text import TfidfVectorizer #inverse document frequency how many times the individual words is repeated 
from sklearn.metrics.pairwise import cosine_similarity

def responses(user_response):
  robo1_response=''
  TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='English')
  tfidf = TfidfVec.fit_transform(sent_tokens)
  vals = cosine_similarity(tfidf[-1],tfidf)
  idx=vals.argsort()[0][-2]
  flat = vals.flatten()
  req_tfidf = flat[-2]
  if(req_tfidf==0):
    robo1_response=robo1_response+ "I am sorry!" "I don't understand you"
    return robo1_response
  else:
    robo1_response = robo1_response+sent_tokens[idx]
    return robo1_response

"""# **Defining Conversation start/end protocols**"""

flag=True
print("BOT : My name is Stark.Let's have conversation! Also if you want to exit any time,just type Bye!")
while(flag==True):

  user_response = input()
  user_response=user_response.lower()
  if(user_response!='bye'):

    if(user_response=='thanks'or user_response=='thank you'):
      flag=False
      print("BOT : You are welcome..")
    else:
      if(greet(user_response)!=None):
        print("BOT: "+greet(user_response))
      else:
        sent_tokens.append(user_response)
        word_tokens=word_tokens+nltk.word_tokenize(user_response)
        final_words=list(set(word_tokens))
        print("BOT: ",end="")
        print(response(user_response))
        sent_tokens.remove(user_response)
  else:
    flag=False
    print("BOT: GoodBye! Take Care <3")